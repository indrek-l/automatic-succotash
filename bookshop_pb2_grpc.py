# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bookshop_pb2 as bookshop__pb2


class BookshopStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_chain = channel.unary_unary(
                '/Bookshop/create_chain',
                request_serializer=bookshop__pb2.CreateChainRequest.SerializeToString,
                response_deserializer=bookshop__pb2.CreateChainResponse.FromString,
                )
        self.add_process_to_chain = channel.unary_unary(
                '/Bookshop/add_process_to_chain',
                request_serializer=bookshop__pb2.AddProcessToChainRequest.SerializeToString,
                response_deserializer=bookshop__pb2.AddProcessToChainResponse.FromString,
                )
        self.list_chain = channel.unary_unary(
                '/Bookshop/list_chain',
                request_serializer=bookshop__pb2.ListChainRequest.SerializeToString,
                response_deserializer=bookshop__pb2.ListChainResponse.FromString,
                )
        self.write = channel.unary_unary(
                '/Bookshop/write',
                request_serializer=bookshop__pb2.WriteRequest.SerializeToString,
                response_deserializer=bookshop__pb2.WriteResponse.FromString,
                )
        self.read = channel.unary_unary(
                '/Bookshop/read',
                request_serializer=bookshop__pb2.ReadRequest.SerializeToString,
                response_deserializer=bookshop__pb2.ReadResponse.FromString,
                )
        self.create_processes = channel.unary_unary(
                '/Bookshop/create_processes',
                request_serializer=bookshop__pb2.CreateProcessesRequest.SerializeToString,
                response_deserializer=bookshop__pb2.CreateProcessesResponse.FromString,
                )
        self.get_process_names = channel.unary_unary(
                '/Bookshop/get_process_names',
                request_serializer=bookshop__pb2.GetProcessNamesRequest.SerializeToString,
                response_deserializer=bookshop__pb2.GetProcessNamesResponse.FromString,
                )
        self.list_books = channel.unary_unary(
                '/Bookshop/list_books',
                request_serializer=bookshop__pb2.ListBooksRequest.SerializeToString,
                response_deserializer=bookshop__pb2.ListBooksResponse.FromString,
                )
        self.set_timeout = channel.unary_unary(
                '/Bookshop/set_timeout',
                request_serializer=bookshop__pb2.SetTimeoutRequest.SerializeToString,
                response_deserializer=bookshop__pb2.SetTimeoutResponse.FromString,
                )
        self.data_status = channel.unary_unary(
                '/Bookshop/data_status',
                request_serializer=bookshop__pb2.DataStatusRequest.SerializeToString,
                response_deserializer=bookshop__pb2.DataStatusResponse.FromString,
                )
        self.remove_head = channel.unary_unary(
                '/Bookshop/remove_head',
                request_serializer=bookshop__pb2.RemoveHeadRequest.SerializeToString,
                response_deserializer=bookshop__pb2.RemoveHeadResponse.FromString,
                )
        self.restore_head = channel.unary_unary(
                '/Bookshop/restore_head',
                request_serializer=bookshop__pb2.RestoreHeadRequest.SerializeToString,
                response_deserializer=bookshop__pb2.RestoreHeadResponse.FromString,
                )


class BookshopServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_chain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_process_to_chain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_chain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_processes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_process_names(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_books(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_timeout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def data_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_head(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restore_head(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BookshopServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_chain': grpc.unary_unary_rpc_method_handler(
                    servicer.create_chain,
                    request_deserializer=bookshop__pb2.CreateChainRequest.FromString,
                    response_serializer=bookshop__pb2.CreateChainResponse.SerializeToString,
            ),
            'add_process_to_chain': grpc.unary_unary_rpc_method_handler(
                    servicer.add_process_to_chain,
                    request_deserializer=bookshop__pb2.AddProcessToChainRequest.FromString,
                    response_serializer=bookshop__pb2.AddProcessToChainResponse.SerializeToString,
            ),
            'list_chain': grpc.unary_unary_rpc_method_handler(
                    servicer.list_chain,
                    request_deserializer=bookshop__pb2.ListChainRequest.FromString,
                    response_serializer=bookshop__pb2.ListChainResponse.SerializeToString,
            ),
            'write': grpc.unary_unary_rpc_method_handler(
                    servicer.write,
                    request_deserializer=bookshop__pb2.WriteRequest.FromString,
                    response_serializer=bookshop__pb2.WriteResponse.SerializeToString,
            ),
            'read': grpc.unary_unary_rpc_method_handler(
                    servicer.read,
                    request_deserializer=bookshop__pb2.ReadRequest.FromString,
                    response_serializer=bookshop__pb2.ReadResponse.SerializeToString,
            ),
            'create_processes': grpc.unary_unary_rpc_method_handler(
                    servicer.create_processes,
                    request_deserializer=bookshop__pb2.CreateProcessesRequest.FromString,
                    response_serializer=bookshop__pb2.CreateProcessesResponse.SerializeToString,
            ),
            'get_process_names': grpc.unary_unary_rpc_method_handler(
                    servicer.get_process_names,
                    request_deserializer=bookshop__pb2.GetProcessNamesRequest.FromString,
                    response_serializer=bookshop__pb2.GetProcessNamesResponse.SerializeToString,
            ),
            'list_books': grpc.unary_unary_rpc_method_handler(
                    servicer.list_books,
                    request_deserializer=bookshop__pb2.ListBooksRequest.FromString,
                    response_serializer=bookshop__pb2.ListBooksResponse.SerializeToString,
            ),
            'set_timeout': grpc.unary_unary_rpc_method_handler(
                    servicer.set_timeout,
                    request_deserializer=bookshop__pb2.SetTimeoutRequest.FromString,
                    response_serializer=bookshop__pb2.SetTimeoutResponse.SerializeToString,
            ),
            'data_status': grpc.unary_unary_rpc_method_handler(
                    servicer.data_status,
                    request_deserializer=bookshop__pb2.DataStatusRequest.FromString,
                    response_serializer=bookshop__pb2.DataStatusResponse.SerializeToString,
            ),
            'remove_head': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_head,
                    request_deserializer=bookshop__pb2.RemoveHeadRequest.FromString,
                    response_serializer=bookshop__pb2.RemoveHeadResponse.SerializeToString,
            ),
            'restore_head': grpc.unary_unary_rpc_method_handler(
                    servicer.restore_head,
                    request_deserializer=bookshop__pb2.RestoreHeadRequest.FromString,
                    response_serializer=bookshop__pb2.RestoreHeadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Bookshop', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bookshop(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_chain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/create_chain',
            bookshop__pb2.CreateChainRequest.SerializeToString,
            bookshop__pb2.CreateChainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_process_to_chain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/add_process_to_chain',
            bookshop__pb2.AddProcessToChainRequest.SerializeToString,
            bookshop__pb2.AddProcessToChainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_chain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/list_chain',
            bookshop__pb2.ListChainRequest.SerializeToString,
            bookshop__pb2.ListChainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/write',
            bookshop__pb2.WriteRequest.SerializeToString,
            bookshop__pb2.WriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/read',
            bookshop__pb2.ReadRequest.SerializeToString,
            bookshop__pb2.ReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_processes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/create_processes',
            bookshop__pb2.CreateProcessesRequest.SerializeToString,
            bookshop__pb2.CreateProcessesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_process_names(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/get_process_names',
            bookshop__pb2.GetProcessNamesRequest.SerializeToString,
            bookshop__pb2.GetProcessNamesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_books(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/list_books',
            bookshop__pb2.ListBooksRequest.SerializeToString,
            bookshop__pb2.ListBooksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_timeout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/set_timeout',
            bookshop__pb2.SetTimeoutRequest.SerializeToString,
            bookshop__pb2.SetTimeoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def data_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/data_status',
            bookshop__pb2.DataStatusRequest.SerializeToString,
            bookshop__pb2.DataStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_head(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/remove_head',
            bookshop__pb2.RemoveHeadRequest.SerializeToString,
            bookshop__pb2.RemoveHeadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def restore_head(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bookshop/restore_head',
            bookshop__pb2.RestoreHeadRequest.SerializeToString,
            bookshop__pb2.RestoreHeadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
